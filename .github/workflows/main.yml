name: CICD

on:
  push:
    branches: [feature/CICD_AWS, main]
  pull_request:
    branches: [main]

jobs:
  CICD:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ./server/package-lock.json
      
      # Backend environment variables
      - name: Create backend .env file
        run: |
          echo "PASSWORD=${{ secrets.PASSWORD }}" > server/.env
          echo "USERNAME=${{ secrets.USERNAME }}" >> server/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> server/.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> server/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> server/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> server/.env

      - run: cd server && npm ci
      - run: cd server && npm run test
      - run: cd client && npm ci
      - run: cd client && npm run build --if-present
      - run: cd client && npm test

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build and push Docker image for ARM64
        run: |
          docker buildx create --use
          docker buildx build --platform linux/arm64 -t luchen2001/180toolkit:latest . --push

      - name: Setup SSH Key and SSH into EC2
        env:
          PRIVATE_KEY: ${{ secrets.MY_SSH_PRIVATE_KEY }}
          HOST: ec2-13-210-49-189.ap-southeast-2.compute.amazonaws.com
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 400 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$HOST <<EOF
            docker pull luchen2001/180toolkit:latest
            docker run -d --name 180tooltik luchen2001/180toolkit:latest
          EOF
